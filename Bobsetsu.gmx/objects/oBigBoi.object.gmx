<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBigBoiIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_fixed_rotation = true;

bigBoiIdleImageSpeed = 0.3;
image_speed = bigBoiIdleImageSpeed;
bigBoiWalkingImageSpeed = 0.5;
bigBoiPunchingImageSpeed = 0.5;

bigBoiSpeed=1;

//Scale 3
bigBoiScale = 2;

global.bigBoiDamage = 40;

detectedBob = false;
detectionRange = 600;
losingRange = 800;

punching = false;
finalPunch = false;
punchingDistance = 5;
punchTimerMax = 300;
punchTimer = punchTimerMax;

dying = false;
blinkingSteps = 0;
blinkingStepsMax = 3;
blinkingInvert = false;

punched = false;
isWalking = false;
isHurt = false;
hurtTimerMax = 250;
hurtTimer = hurtTimerMax;

globalvar bigBoiMoneyDropMax;
bigBoiMoneyDropMax = 100; //Will be 101 coz +1

//Healthbars
paddingHealthbar=15; //Distance from the sprite to the height of the healthBar
barHeight=8;
enemyMaxHealth = 250;
enemyHealth = enemyMaxHealth;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var money = instance_create(x, y, oMoneyItem);
            
with(money) {
    value = irandom(bigBoiMoneyDropMax)+1;
}

global.prevEnemiesKilled++;

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.stopTime) { image_speed=0; exit; } else { if(isWalking) { image_speed=bigBoiWalkingImageSpeed; } else if(punching) { image_speed=bigBoiPunchingImageSpeed; } else { image_speed=bigBoiIdleImageSpeed; }}

if(dying) exit;

/*if(!isHurt &amp;&amp; !punching) {
    if ((phy_speed_x &gt; 0.1 || phy_speed_x &lt; -0.1) &amp;&amp; )) {
        sprite_index = sBigBoiWalking;
        image_speed = bigBoiWalkingImageSpeed;
    } else {
        sprite_index = sBigBoiIdle;
        image_speed = bigBoiIdleImageSpeed;
    }
}*/

/*-------[ Collision detection ]-------*/
if(place_meeting(x, y, oBullet) || punched) {
    if(!punched) {
        with(instance_nearest(x, y, oBullet)) {
            instance_destroy();
        }
    }
    isHurt = true;
    sprite_index = sBigBoiHurt;

    if(irandom(1) == 0) audio_play_sound(soBigBoiHurt01, 1, false); else audio_play_sound(soBigBoiHurt02, 1, false);
    
    //Appear damage obj
    if(punched) {
        floatingText(x, y, global.fistDamage, c_red);
        enemyHealth -= global.fistDamage;
        punched = false;
    } else {
        floatingText(x, y, global.bulletDamage, c_red);
        enemyHealth -= global.bulletDamage;
    }
    
    if(enemyHealth &lt;= 0) {
        enemyHealth = 0;
    }
}

/*-------[ Hurt Animation ]-------*/
if(isHurt) {
    hurtTimer -= delta_time/1000;
    image_blend = c_red;
    
    if(enemyHealth &lt;= 0) {
        phy_speed_x = 0;
        dying = true;
        alarm[10] = 0.5 * room_speed; //DeathTimer
    }
    
    if(hurtTimer &lt;= 0) {
        hurtTimer = hurtTimerMax;


        
        sprite_index = sBigBoiIdle;
        image_speed = bigBoiIdleImageSpeed;
        
        isHurt = false;
        image_blend = c_white;
    }
    exit;
}



/*-------[ Distance Detection ]-------*/
distanceToBob = distance_to_object(oBob);
if(distanceToBob &lt; detectionRange) {
    if(!detectedBob) detectedBob = true;
} else if(distanceToBob &gt; losingRange) {
    if(detectedBob) detectedBob = false;
}

/*-------[ Movement ]-------*/
if(detectedBob) {
    if(isWalking) isWalking = false;
    if(x &lt;= oBob.x) 
    {
        image_xscale = bigBoiScale;
        phySpeed = bigBoiSpeed;
    } else {
        image_xscale = -bigBoiScale;
        phySpeed = -bigBoiSpeed;
    }
        
    if(!punching) {
        if(!isWalking) isWalking = true;
            
        if(distanceToBob &lt; punchingDistance) {
            punching = true;
            sprite_index = sBigBoiPrepPunch;
            image_speed = bigBoiPunchingImageSpeed;
        } else {
            phy_speed_x = phySpeed;
            
            /* Animation */
                
            if(!place_meeting(x-1, y, oCollisionBase) || !place_meeting(x+1, y, oCollisionBase)) {
                sprite_index = sBigBoiWalking;
                image_speed = bigBoiWalkingImageSpeed;
            } else {
                sprite_index = sBigBoiIdle;
                image_speed = bigBoiIdleImageSpeed;
            }
                
            /* --------- */
        }
    } else {
        if(floor(image_index) == 10) {
            sprite_index = sBigBoiPunch;
            finalPunch = true;
            depth = -1;
                
            with(oBob) {
                punched = true;
            }
        }
        if(finalPunch) {
            punchTimer -= delta_time/1000;
                
            if(punchTimer &lt;= 0) {
                punchTimer = punchTimerMax;
                finalPunch = false;
                punching = false;
                depth = 0;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCollisionBase">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>YEEPEEYAH!</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dying) {
    blinkingSteps++ 
    if(blinkingSteps &gt; blinkingStepsMax) {
        blinkingSteps = 0;
        blinkingInvert = !blinkingInvert;
    }
    if(blinkingInvert) {
        draw_self();
    }
} else {
    draw_self();

    draw_set_colour(c_red);
    draw_healthbar(x-(abs(sprite_width)/2), y-(sprite_height/2)-paddingHealthbar, x+(abs(sprite_width)/2), y-(sprite_height/2)-paddingHealthbar-barHeight, enemyHealth/enemyMaxHealth*100, c_black, c_red, c_red, 0, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>10,0</point>
    <point>24,0</point>
    <point>24,32</point>
    <point>10,32</point>
  </PhysicsShapePoints>
</object>

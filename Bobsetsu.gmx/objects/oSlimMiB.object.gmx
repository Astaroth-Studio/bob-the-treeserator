<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSlimIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slimScale = 2;
slimIdleImageSpeed = 0.3;
image_speed = slimIdleImageSpeed;
slimWalkingImageSpeed = 0.5;
phy_fixed_rotation = true;

slimSpeed=4;

//Stopping close to Bob
minRange=150;
//Detection range to Bob
range=600;

//Stop if next to bob and fire
isFiring = false;

bulletSpeed = 4;
canShoot = true;
global.slimBulletDamage = 10;

punched = false;
isHurt = false;
hurtTimerMax = 250;
hurtTimer = hurtTimerMax;

//Healthbars
paddingHealthbar=15; //Distance from the sprite to the height of the healthBar
barHeight=8;
slimHealth = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.stopTime) { image_speed=0; exit; } else { image_speed=slimIdleImageSpeed; }

//show_debug_message(distance_to_object(oBob));

/*if (phy_speed_x &gt; 0.1 || phy_speed_x &lt; -0.1) {
    if(isFiring) {
        sprite_index = sSlimWalkingFiring;
    } else {
        sprite_index = sSlimWalking;
    }
    image_speed = slimWalkingImageSpeed;
} else {
    if(isFiring) {
        sprite_index = sSlimIdleFiring;
    } else {
        sprite_index = sSlimIdle;
    }
    image_speed = slimIdleImageSpeed;
}*/

/*-------[ Collision detection ]-------*/
if(place_meeting(x, y, oBullet) || punched) {
    if(!punched) {
        with(instance_nearest(x, y, oBullet)) {
            instance_destroy();
        }
    }
    isHurt = true;
    sprite_index = sSlimHurt;
    

    //Appear damage obj
    var inst = instance_create(x,y,oDamage);
    if(punched) {
        with (inst) {
            damage= global.fistDamage;
        }
        slimHealth -= global.fistDamage;
        punched = false;
    } else {
        with (inst) {
            damage= global.bulletDamage;
        }
        slimHealth -= global.bulletDamage;
    }
    
    if(slimHealth &lt;= 0) {
        slimHealth = 0;
    }
}

if(isHurt) {
    hurtTimer -= delta_time/1000;
    if(hurtTimer &lt;= 0) {
        hurtTimer = hurtTimerMax;
        sprite_index = sSlimIdle;
        if(isFiring = true) {
            sprite_index = sSlimIdleFiring;
        }
        if(slimHealth &lt;= 0) {
            instance_destroy();
        }
        isHurt = false;
    }
    exit;
}

if(distance_to_object(oBob) &lt; range) {
    if(x &lt;= oBob.x) 
    {
        image_xscale= slimScale;
        if(distance_to_object(oBob) &lt; minRange) {
            isFiring = true;
            phy_speed_x = 0;
            
            /* Animation */
            sprite_index = sSlimIdleFiring;
            image_speed = slimIdleImageSpeed;
            /* --------- */
            
        } else if(!isFiring) {
            phy_speed_x = slimSpeed;
            
            /* Animation */
            sprite_index = sSlimWalking;
            image_speed = slimWalkingImageSpeed;
            /* --------- */
        }
    } else {
        image_xscale= -slimScale;
        if(distance_to_object(oBob) &lt; minRange) {
            isFiring = true;
            phy_speed_x = 0;
            
            /* Animation */
            sprite_index = sSlimIdleFiring;
            image_speed = slimIdleImageSpeed;
            /* --------- */
        } else if(!isFiring) {
            phy_speed_x = -slimSpeed;
            
            /* Animation */
            sprite_index = sSlimWalking;
            image_speed = slimWalkingImageSpeed;
            /* --------- */
        }
    }
} else {
    isFiring = false;
    
    /* Animation */
    sprite_index = sSlimIdle;
    image_speed = slimIdleImageSpeed;
    /* --------- */
}

if(isFiring)
{
    if(floor(image_index)==1) {
        if(canShoot) {
            if(image_xscale == slimScale) {
                bulletX = 16;
                bulletY = -4;
                scale = 1;
                bulletXspeed = bulletSpeed;
            } else {
                bulletX = -16;
                bulletY = -4;
                scale = -1;
                bulletXspeed = -bulletSpeed;
            }
            var inst = instance_create(x+bulletX, y+bulletY, oSlimBullet);
            inst.phy_bullet = true;
            inst.phy_speed_x = bulletXspeed;
            inst.image_xscale = scale;
            canShoot = false;
        }
    } else {
        if(!canShoot) canShoot = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCollisionBase">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Fuck you baltimore 2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

draw_set_colour(c_red);
draw_healthbar(x-(abs(sprite_width)/2), y-(sprite_height/2)-paddingHealthbar, x+(abs(sprite_width)/2), y-(sprite_height/2)-paddingHealthbar-barHeight, slimHealth, c_black, c_red, c_red, 0, true, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,0</point>
    <point>20,0</point>
    <point>20,32</point>
    <point>12,32</point>
  </PhysicsShapePoints>
</object>

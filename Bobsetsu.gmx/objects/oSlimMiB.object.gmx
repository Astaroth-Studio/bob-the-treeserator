<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSlimIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>slimScale = 2;
slimIdleImageSpeed = 0.25;
image_speed = slimIdleImageSpeed;
slimWalkingImageSpeed = 0.5;
slimIdleFiringImageSpeed = 0.2;
phy_fixed_rotation = true;

slimSpeed=4;

bulletUntilDelay = 4;
bulletsShot = 0;
bulletDelay = 0.8;
bulletDelayDone = true;

//Stopping close to Bob
minRange=150;
//Detection range to Bob
range=450;

//Stop if next to bob and fire
isFiring = false;

bulletSpeed = 4;
canShoot = true;
global.slimBulletDamage = 10;

dying = false;
blinkingSteps = 0;
blinkingStepsMax = 3;
blinkingInvert = false;

punched = false;
isHurt = false;
hurtTimerMax = 250;
hurtTimer = hurtTimerMax;

globalvar slimMoneyDropMax;
slimMoneyDropMax = 10; //Will be eleven coz +1

//Healthbars
paddingHealthbar=15; //Distance from the sprite to the height of the healthBar
barHeight=8;
enemyHealth = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>611</id>
        <kind>6</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>bulletDelayDone</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>true</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var money = instance_create(x, y, oMoneyItem);
            
with(money) {
    value = irandom(slimMoneyDropMax)+1;
}

global.prevEnemiesKilled++;

instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.stopTime) { image_speed=0; exit; } else if(isFiring) { image_speed=slimIdleFiringImageSpeed; } else { image_speed=slimIdleImageSpeed; }

if(dying) exit;

/*-------[ Collision detection ]-------*/
if(place_meeting(x, y, oBullet) || punched) {
    if(!punched) {
        with(instance_nearest(x, y, oBullet)) {
            instance_destroy();
        }
    }
    isHurt = true;
    sprite_index = sSlimHurt;
    
    if(irandom(1) == 0) audio_play_sound(soSlimHurt01, 1, false); else audio_play_sound(soSlimHurt02, 1, false);
    
    //Appear damage obj
    if(punched) {
        floatingText(x, y, global.fistDamage, c_red);
        enemyHealth -= global.fistDamage;
        punched = false;
    } else {
        floatingText(x, y, global.bulletDamage, c_red);
        enemyHealth -= global.bulletDamage;
    }
    
    if(enemyHealth &lt;= 0) {
        enemyHealth = 0;
    }
}

if(isHurt) {
    hurtTimer -= delta_time/1000;
    image_blend = c_red;
    
    if(enemyHealth &lt;= 0) {
        phy_speed_x = 0;
        dying = true;
        alarm[10] = 0.5 * room_speed; //DeathTimer
    }
    
    if(hurtTimer &lt;= 0) {
        hurtTimer = hurtTimerMax;
        
        if(isFiring = true) sprite_index = sSlimIdleFiring; else sprite_index = sSlimIdle;
        isHurt = false;
        image_blend = c_white;
    }
    exit;
}

if(distance_to_object(oBob) &lt; range) {
    if(x &lt;= oBob.x) 
    {
        image_xscale = slimScale;
        if(distance_to_object(oBob) &lt; minRange) {
            isFiring = true;
            phy_speed_x = 0;
            
            /* Animation */
            sprite_index = sSlimIdleFiring;
            image_speed = slimIdleFiringImageSpeed;
            /* --------- */
            
        } else if(!isFiring) {
            phy_speed_x = slimSpeed;
            
            /* Animation */
            if(!place_meeting(x-1, y, oCollisionBase) || !place_meeting(x+1, y, oCollisionBase)) {
                sprite_index = sSlimWalking;
                image_speed = slimWalkingImageSpeed;
            } else {
                sprite_index = sSlimIdle;
                image_speed = slimIdleImageSpeed;
            }
            /* --------- */

        }
    } else {
        image_xscale= -slimScale;
        if(distance_to_object(oBob) &lt; minRange) {
            isFiring = true;
            phy_speed_x = 0;
            
            /* Animation */
            sprite_index = sSlimIdleFiring;
            image_speed = slimIdleFiringImageSpeed;
            /* --------- */
        } else if(!isFiring) {
            phy_speed_x = -slimSpeed;
            
            if(!place_meeting(x-1, y, oCollisionBase) || !place_meeting(x+1, y, oCollisionBase)) {
                sprite_index = sSlimWalking;
                image_speed = slimWalkingImageSpeed;
            } else {
                sprite_index = sSlimIdle;
                image_speed = slimIdleImageSpeed;
            }
        }
    }
} else {
    isFiring = false;
    
    /* Animation */
    sprite_index = sSlimIdle;
    image_speed = slimIdleImageSpeed;
    /* --------- */
}

if(isFiring) {
    if(floor(image_index)==1) {
        if(canShoot &amp;&amp; bulletDelayDone) {
            if(image_xscale == slimScale) {
                bulletX = 16;
                bulletY = -4;
                scale = 1;
                bulletXspeed = bulletSpeed;
            } else {
                bulletX = -16;
                bulletY = -4;
                scale = -1;
                bulletXspeed = -bulletSpeed;
            }
            var inst = instance_create(x+bulletX, y+bulletY, oSlimBullet);
            inst.phy_bullet = true;
            inst.phy_speed_x = bulletXspeed;
            inst.image_xscale = scale;
            canShoot = false;
            
            bulletsShot++;
            if(bulletsShot &gt;= bulletUntilDelay) {
                bulletDelayDone = false;
                alarm[11] = bulletDelay*room_speed;
                bulletsShot = 0;
            }
        }
    } else {
        if(!canShoot) canShoot = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCollisionBase">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Fuck you, Baltimore</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(dying) {
    blinkingSteps++ 
    if(blinkingSteps &gt; blinkingStepsMax) {
        blinkingSteps = 0;
        blinkingInvert = !blinkingInvert;
    }
    if(blinkingInvert) {
        draw_self();
    }
} else {
    draw_self();
    
    draw_set_colour(c_red);
    draw_healthbar(x-(abs(sprite_width)/2), y-(sprite_height/2)-paddingHealthbar, x+(abs(sprite_width)/2), y-(sprite_height/2)-paddingHealthbar-barHeight, enemyHealth, c_black, c_red, c_red, 0, true, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>12,0</point>
    <point>20,0</point>
    <point>20,32</point>
    <point>12,32</point>
  </PhysicsShapePoints>
</object>

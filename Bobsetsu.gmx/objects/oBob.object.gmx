<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBobIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.stopTime = false;

BOB_SCALE = 2; // Change this number if you rescale Bob
isFighting = false;
isShooting = false;

defaultSpeed = 0.075;
image_speed = defaultSpeed;
walkSpeed = 0.075;
moveSpeed = 3000;
maxXSpeed = 4;

globalvar controls;
controls = true; // Desactivated when falling

phy_fixed_rotation = true;

global.bulletDamage = 15;
global.fistDamage = 35;
bulletSpeed = 15;
fullShootingCooldown = 400; // Cooldown in milliseconds
shootingCooldown = fullShootingCooldown; // Time changing each step
globalvar currentWeapon;
currentWeapon = 0;

recoveryTimeMaxCooldown = 1000;
recoveryTimeCooldown = recoveryTimeMaxCooldown;

punched = false;
isHurt = false;
hurtTimerMax = 150;
hurtTimer = hurtTimerMax;

jumpPower = 500;

//Punch variables
inPunch = false;
inTruePunch = false;
maxStopTimer = 250;
stopTimer = maxStopTimer;
currentRandomX = 0;
currentX = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oBob</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Parallax Effectâ„¢
background_x[1] =  view_xview[0] + (view_wview[0] * 0.3) + (( 1 - (view_xview[0] / room_width))) * (view_wview[0] * 0.4);
background_x[2] =  view_xview[0] * 0.7;
background_x[3] = (view_wview[0]-background_width[3]) * (view_xview[0]/(room_width-view_wview[0])) + view_xview[0];

/*-------[ Punching System ]-------*/
if(inPunch) {
    stopTimer = stopTimer-(delta_time/1000);
    
    if(inTruePunch) {
        progress=stopTimer/maxStopTimer;
        if(progress &lt;= 0.5) {
            view_xview[0] = currentX + (currentRandomX * (progress/0.5));
        } else {
            view_xview[0] = currentX;
        }
    }
    
    if(stopTimer &lt;= 0) {
        stopTimer = maxStopTimer;
        if(inTruePunch) {
            global.stopTime = false;
            physics_pause_enable(false);
            inTruePunch = false;
        }
        inPunch = false;
        isFighting = false;
    }
}

//Everything below this code will not be executed after stopTime has been set to true
if(global.stopTime) { image_speed = 0; exit; }

/*-------[ Hurt Animation ]-------*/
if(isHurt) {
    hurtTimer -= delta_time/1000;
    if(hurtTimer &lt;= 0) {
        if(playerHealth &lt;= 0) {
            //Dying
        }
        isHurt = false;
    }
    exit;
}

/*-------[ Slowing down ]-------*/
phy_speed_x = max(min(phy_speed_x, maxXSpeed), -maxXSpeed);
isMoving = false;

/*--[ Changing sprite direction and speed] --*/
if (phy_speed_x &gt; 0.1 || phy_speed_x &lt; -0.1) {
   if(sprite_index != sBobWalking &amp;&amp; !isFighting) {
       sprite_index = sBobWalking;
   }
   walkSpeed = phy_speed_x / 10;
   
   if(image_xscale == BOB_SCALE) {
        image_speed = walkSpeed;
   } else {
        image_speed = -walkSpeed;
   }
   
   isMoving = true;
} else {
    //If sprite has not already been set and is not firing &gt; Set image_speed + set sprite
    if(sprite_index != sBobIdle &amp;&amp; !isFighting) {
        sprite_index = sBobIdle;
        image_speed = defaultSpeed;
    } else if (isShooting) {
        image_speed = defaultSpeed*3;
    }
    isMoving = false;
}

/*------[ Jumping! ]------*/
//if(keyboard_check_released(vk_space) 
if(keyboard_check_released(global.keyJump) &amp;&amp; place_meeting(x,y+1,oCollisionBase)) {
    phy_linear_velocity_y = -jumpPower;
}
/*if (physics_test_overlap(x, y, 0, oCollisionBase) &amp;&amp; phy_linear_velocity_y &gt; 0.1) {
    jumpsLeft = maxJumps;
}*/

/*------[ Falling is bad ]------*/

/*if(phy_speed_y &gt; 1.2){
    controls = false;
    if(sprite_index != sBobWalking) {
        sprite_index = sBobFalling;
    }
} else {
    if(instance_number(oDialog) == 0) {
        controls = true;
    }
}*/

/*-------[ Moving ]-------*/
if (controls) {
    //if keyboard_check(ord('D')) {
    if keyboard_check(global.keyRight) {
        if (!isFighting) {
            image_xscale = BOB_SCALE;
        }
        //image_speed = walkSpeed;
        physics_apply_force(x,y,moveSpeed,-100);
    }
    //if keyboard_check(ord('Q')) {
    if keyboard_check(global.keyLeft) {
        if (!isFighting) {
            image_xscale = -BOB_SCALE;
        }
        //image_speed = -walkSpeed;
        physics_apply_force(x,y,-moveSpeed,-100);
    }
}
/*-------[ Collision detection ]-------*/
if(place_meeting(x, y, oSlimBullet)) {
    with(instance_nearest(x, y, oSlimBullet)) {
        instance_destroy();
    }
    if(recoveryTimeCooldown &lt;= 0) {
        recoveryTimeCooldown = recoveryTimeMaxCooldown;
        
        playerHealth -= global.slimBulletDamage;
        
        hurtTimer = hurtTimerMax;
        isHurt = true;
        sprite_index = sBobHurt;
    }
}
/*-------[ Punched detection ]-------*/
if(punched) {
    if(recoveryTimeCooldown &lt;= 0) {
        recoveryTimeCooldown = recoveryTimeMaxCooldown;
        
        playerHealth -= global.bigBoiDamage;
        
        hurtTimer = hurtTimerMax;
        isHurt = true;
        sprite_index = sBobHurt;
    }
    punched = false;
}
/*-------[ Recovery Time ]-------*/
if(recoveryTimeCooldown &gt;= 0) {
    recoveryTimeCooldown-=(delta_time/1000); // delta_time is in microseconds
}

/*-------[ Combat System - Switching Weapon ]-------*/

//if (keyboard_check_released(ord('A'))) {
if (keyboard_check_released(global.keySwitch)) {
    if(currentWeapon == 1) currentWeapon = 0; else currentWeapon++;
}

/*-------[ Combat System - Shooting ]-------*/
if(shootingCooldown &gt;= 0) {
    shootingCooldown-=(delta_time/1000); // delta_time is in microseconds
}

/* Need to simplify */
if (controls) {
    //if(playerAmmo[0] &gt; 0) {
    if(currentWeapon == 1) {
        //Bullet X spawn position
        bulletX = 0;
        //Bullet Y spawn position
        bulletY = 0;
        //Bullet spawn direction
        bulletXspeed = 0;
        bulletYspeed = 0;
    
        //Switch sprite xscale depending on key and setting isFiring
        //if keyboard_check(vk_left) {
        if keyboard_check(global.keyAttackLeft) {
            isShooting = true;
            isFighting = true;
            if (image_xscale != -BOB_SCALE) {
               image_xscale = -BOB_SCALE;
            }
        //} else if keyboard_check(vk_right) {
        } else if keyboard_check(global.keyAttackRight) {
            isShooting = true;
            isFighting = true;
            if (image_xscale != BOB_SCALE) {
               image_xscale = BOB_SCALE;
            }
        //} else if keyboard_check(vk_up) {
        } else if keyboard_check(global.keyAttackUp) {
            isShooting = true;
            isFighting = true;
        } else {
            // Not pressing any keys &amp;gt; isFiring = false
            isShooting = false;
            isFighting = false;
        }
        
        if(!isShooting) {
            if(!isMoving &amp;&amp; sprite_index != sBobIdleArmed) {
                sprite_index = sBobIdleArmed;
            } else if(isMoving &amp;&amp; sprite_index != sBobWalkingArmed) {
                sprite_index = sBobWalkingArmed;
            }
        }
        
        //Up Left
        //if keyboard_check(vk_left) &amp;&amp; keyboard_check(vk_up) {
        if keyboard_check(global.keyAttackLeft) &amp;&amp; keyboard_check(global.keyAttackUp) {
            if(isMoving)
            {
                if (sprite_index != sBobWalkingFiringUpward) {
                    sprite_index = sBobWalkingFiringUpward;
                }
            } else {
                if (sprite_index != sBobIdleFiringUpward) {
                    sprite_index = sBobIdleFiringUpward;
                }
            }
            
            //Angle 135
            bulletX = -16;
            bulletY = -24;
            bulletXspeed = -bulletSpeed;
            bulletYspeed = -bulletSpeed*0.5;
        //} else if keyboard_check(vk_right) &amp;&amp; keyboard_check(vk_up) {
        } else if keyboard_check(global.keyAttackRight) &amp;&amp; keyboard_check(global.keyAttackUp) {
        //Angle 45
            if(isMoving)
            {
                if (sprite_index != sBobWalkingFiringUpward) {
                    sprite_index = sBobWalkingFiringUpward;
                }
            } else {
                if (sprite_index != sBobIdleFiringUpward) {
                    sprite_index = sBobIdleFiringUpward;
                    
                }
            }
        
            bulletX = 16;
            bulletY = -24;
            bulletXspeed = bulletSpeed;
            bulletYspeed = -bulletSpeed*0.5;
        //} else if keyboard_check(vk_left) {
        } else if keyboard_check(global.keyAttackLeft) {
        //Angle 180
            if(isMoving)
            {
                if (sprite_index != sBobWalkingFiring) {
                    sprite_index = sBobWalkingFiring;
                }
            } else {
                if (sprite_index != sBobIdleFiring) {
                    sprite_index = sBobIdleFiring;
                }
            }
        
            bulletX = -24;
            bulletY = 0;
            bulletXspeed = -bulletSpeed;
            bulletYspeed = 0;
            
        //} else if keyboard_check(vk_right) {
        } else if keyboard_check(global.keyAttackRight) {
        //Angle 0
            if(isMoving)
            {
                if (sprite_index != sBobWalkingFiring) {
                    sprite_index = sBobWalkingFiring;
                }
            } else {
                if (sprite_index != sBobIdleFiring) {
                    sprite_index = sBobIdleFiring;
                }
            }
            bulletX = 24;
            bulletY = 0;
            bulletXspeed = bulletSpeed;
            bulletYspeed = 0;
        //} else if keyboard_check(vk_up) {
        } else if keyboard_check(global.keyAttackUp) {
        //Angle 90
            if(isMoving)
            {
                if (sprite_index != sBobWalkingFiringUp) {
                    sprite_index = sBobWalkingFiringUp;
                }
            } else {
                if (sprite_index != sBobIdleFiringUp) {
                    sprite_index = sBobIdleFiringUp;
                }
            }
            bulletX = 0;
            bulletY = -32;
            bulletDir = 90;
            bulletXspeed = 0 + phy_speed_x;
            bulletYspeed = -bulletSpeed;
        }
        
        //Shoot the bullet !
        if(isShooting &amp;&amp; playerAmmo[0] &gt; 0) {
            if(shootingCooldown &lt;= 0) {
                var inst = instance_create(x+bulletX, y+bulletY, oBullet);
                playerAmmo[0]--;
                inst.phy_bullet = true;
                inst.phy_speed_x = bulletXspeed;
                inst.phy_speed_y = bulletYspeed;
    
                shootingCooldown = fullShootingCooldown;
            }
        }
    /*-------[ Combat System - Punch ]-------*/
    } else if(currentWeapon == 0 &amp;&amp; !inPunch) {
        //if keyboard_check_released(vk_left) {
        if keyboard_check_released(global.keyAttackLeft) {
            isFighting = true;
            if (image_xscale != -BOB_SCALE) {
                image_xscale = -BOB_SCALE;
            }
            if(irandom(1) == 0) {
                sprite_index = sBobFight1;
            } else {
                sprite_index = sBobFight2;
            }
            inPunch = true;
            
            //show_debug_message("Test");
            collision_object = collision_rectangle(x-16,y+16,x-32,y-16, oSlimMiB, false, true);
            if(collision_object == noone) {
                collision_object = collision_rectangle(x-16,y+16,x-32,y-16, oBigBoi, false, true);
            }
            if(collision_object != noone)/*|| place_meeting(x-16, y, oBigMiB)*/{
            
                currentX = view_xview[0];
                currentRandomX = irandom(64)-32;
                global.stopTime = true;
                physics_pause_enable(true);
                inTruePunch = true;
                
                with (collision_object) {
                    punched = true;
                }
            }
        //} else if keyboard_check_released(vk_right) {
        } else if keyboard_check_released(global.keyAttackRight) {
            
            isFighting = true;
            if (image_xscale != BOB_SCALE) {
                image_xscale = BOB_SCALE;
            }
            if(irandom(1) == 0) {
                sprite_index = sBobFight1;
            } else {
                sprite_index = sBobFight2;
            }
            inPunch = true;
            
            collision_object = collision_rectangle(x+16,y+16,x+32,y-16, oSlimMiB, false, true);
            if(collision_object == noone) {
                collision_object = collision_rectangle(x+16,y+16,x+32,y-16, oBigBoi, false, true);
            }
            if(collision_object != noone)/*|| place_meeting(x-16, y, oBigMiB)*/{
                
                currentX = view_xview[0];
                currentRandomX = irandom(64)-32;
                global.stopTime = true;
                physics_pause_enable(true);
                inTruePunch = true;
                
                with (collision_object) {
                    punched = true;
                }
            }
        }
    }
}

// Code to stick Bob to the right side of the viewPort
/*follow = false;
startingPoint = 0
movingValue = -1

if (bobDirection == 1) {
    if (view_xview[0] &gt; x + (sprite_width/2) - 0.70 * view_wview[0]){
        follow = false;
        view_xview[0] += bobSpeed * 5;
    } else if (view_xview[0] + x + (sprite_width/2) &gt;= view_xview[0] + 0.30 * view_wview[0]) {
        follow = true;
    }
} else {
    follow = false;
}

if (follow) {
    if (bobDirection == 1) { 
        viewPos = x + (sprite_width/2) - 0.30 * view_wview[0]
        if (viewPos + view_wview[0] &gt; room_width) {
            viewPos = room_width - view_wview[0];        
        }
        view_xview[0] = viewPos;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCollisionBase">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Fuck you Baltimore</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//jumpsLeft = maxJumps;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if(distance_to_object(oShop) == 0) {
    draw_set_color(c_white);
    draw_set_halign(fa_center);
    draw_text(x, y-sprite_height, "10 ammos = $10AUS");
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Setting randoms on button press
if(distance_to_object(oShop) == 0 &amp;&amp; playerMoney &gt;= 10) {
    playerMoney -= 10;
    playerAmmo[0] += 10;
    var inst = instance_create(x,y-sprite_height-string_height(font_mm),oDamage);
    
    with (inst) {
        text = "-$10AUS";
    }
    
    var inst = instance_create(x,y-sprite_height,oDamage);
    
    with (inst) {
        text = "+10 Ammos";
        color = c_green;
    }
        
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,4</point>
    <point>26,4</point>
    <point>26,32</point>
    <point>5,32</point>
  </PhysicsShapePoints>
</object>

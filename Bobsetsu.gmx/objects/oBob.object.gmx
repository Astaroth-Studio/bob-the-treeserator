<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBobIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>BOB_SCALE = 2; // Change this number if you rescale Bob
isFiring = false;

defaultSpeed = 0.075;
image_speed = defaultSpeed;
walkSpeed = 0.075;
moveSpeed = 3000;
maxXSpeed = 4;

controls = true; // Desactivated when falling

phy_fixed_rotation = true;

bulletSpeed = 8;
fullShootingCooldown = 250; // Cooldown of 250 milliseconds
shootingCooldown = fullShootingCooldown; // Time changing each step 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>oBob</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_speed_x = max(min(phy_speed_x, maxXSpeed), -maxXSpeed);
isMoving = false;

// Moving &gt; Change sprite and speed
if (phy_speed_x &gt; 0.1 || phy_speed_x &lt; -0.1) {
   if(sprite_index != sBobWalking &amp;&amp; !isFiring) {
       sprite_index = sBobWalking;
   }
   walkSpeed = phy_speed_x / 10;
   isMoving = true;
} else {
    if(sprite_index != sBobIdle &amp;&amp; !isFiring) {
       sprite_index = sBobIdle;
       image_speed = defaultSpeed;
    }
    isMoving = false;
}

// Failling is bad
if(phy_speed_y &gt; 1.2){
    controls = false;
    if(sprite_index != sBobWalking) {
        sprite_index = sBobFalling;
    }
} else {
    controls = true;
}

// Parallax Effectâ„¢
background_x[1] =  view_xview[0] + (view_wview[0] * 0.30) + (( 1 - (view_xview[0] / room_width))) * (view_wview[0] * 0.40);
background_x[2] =  view_xview[0] * 0.7;
background_x[3] = (view_wview[0]-background_width[3]) * (view_xview[0]/(room_width-view_wview[0])) + view_xview[0];

//Shooting
if(shootingCooldown &gt;= 0) {
    shootingCooldown-=(delta_time/1000); // delta_time is in microseconds
}
/* Need to simplify */
if (controls) {
    //Bullet X spawn position
    bulletX = 0;
    //Bullet Y spawn position
    bulletY = 0;
    //Bullet spawn direction
    bulletXspeed = 0;
    bulletYspeed = 0;

    //Switch sprite xscale depending on key and setting isFiring
    if keyboard_check(vk_left) {
        isFiring = true;
        if (image_xscale != -BOB_SCALE) {
           image_xscale = -BOB_SCALE;
        }
    } else if keyboard_check(vk_right) {
        isFiring = true;
        if (image_xscale != BOB_SCALE) {
           image_xscale = BOB_SCALE;
        }
    } else if keyboard_check(vk_up) {
        isFiring = true;
    } else {
        // Not pressing any keys &amp;gt; isFiring = false
        isFiring = false;
    }
    
    //Up Left
    if keyboard_check(vk_left) &amp;&amp; keyboard_check(vk_up) {
        if(isMoving)
        {
            if (sprite_index != sBobWalkingFiringUpward) {
                sprite_index = sBobWalkingFiringUpward;
            }
        } else {
            if (sprite_index != sBobIdleFiringUpward) {
                sprite_index = sBobIdleFiringUpward;
            }
        }
        
        //Angle 135
        bulletX = -16;
        bulletY = -32;
        bulletXspeed = -bulletSpeed;
        bulletYspeed = -bulletSpeed;
    } else if keyboard_check(vk_right) &amp;&amp; keyboard_check(vk_up) {
    //Angle 45
        if(isMoving)
        {
            if (sprite_index != sBobWalkingFiringUpward) {
                sprite_index = sBobWalkingFiringUpward;
            }
        } else {
            if (sprite_index != sBobIdleFiringUpward) {
                sprite_index = sBobIdleFiringUpward;
                
            }
        }
    
        bulletX = 16;
        bulletY = -32;
        bulletXspeed = bulletSpeed;
        bulletYspeed = -bulletSpeed;
    } else if keyboard_check(vk_left) {
    //Angle 180
        if(isMoving)
        {
            if (sprite_index != sBobWalkingFiring) {
                sprite_index = sBobWalkingFiring;
            }
        } else {
            if (sprite_index != sBobIdleFiring) {
                sprite_index = sBobIdleFiring;
            }
        }
    
        bulletX = -16;
        bulletY = 0;
        bulletXspeed = -bulletSpeed;
        bulletYspeed = 0;
        
    } else if keyboard_check(vk_right) {
    //Angle 0
        if(isMoving)
        {
            if (sprite_index != sBobWalkingFiring) {
                sprite_index = sBobWalkingFiring;
            }
        } else {
            if (sprite_index != sBobIdleFiring) {
                sprite_index = sBobIdleFiring;
            }
        }
        bulletX = 16;
        bulletY = 0;
        bulletXspeed = bulletSpeed;
        bulletYspeed = 0;
    } else if keyboard_check(vk_up) {
    //Angle 90
        if(isMoving)
        {
            if (sprite_index != sBobWalkingFiringUp) {
                sprite_index = sBobWalkingFiringUp;
            }
        } else {
            if (sprite_index != sBobIdleFiringUp) {
                sprite_index = sBobIdleFiringUp;
            }
        }
        bulletX = 0;
        bulletY = -32;
        bulletDir = 90;
        bulletXspeed = 0;
        bulletYspeed = -bulletSpeed;
    }
    
    //Shoot the bullet !
    if(isFiring) {
        if(shootingCooldown &lt;= 0) {
            show_debug_message(image_index);
            if((!isMoving &amp;&amp; round(image_index)==4) || (isMoving)) {
                var inst = instance_create(x+bulletX, y+bulletY, oBullet);
                inst.phy_bullet = true;
                inst.phy_speed_x = bulletXspeed;
                inst.phy_speed_y = bulletYspeed;
                //inst.speed = bulletSpeed;
                //inst.image_angle = bulletDir;
                shootingCooldown = fullShootingCooldown;
            }
        }
    }
}



// Code to stick Bob to the right side of the viewPort
/*follow = false;
startingPoint = 0
movingValue = -1

if (bobDirection == 1) {
    if (view_xview[0] &gt; x + (sprite_width/2) - 0.70 * view_wview[0]){
        follow = false;
        view_xview[0] += bobSpeed * 5;
    } else if (view_xview[0] + x + (sprite_width/2) &gt;= view_xview[0] + 0.30 * view_wview[0]) {
        follow = true;
    }
} else {
    follow = false;
}

if (follow) {
    if (bobDirection == 1) { 
        viewPos = x + (sprite_width/2) - 0.30 * view_wview[0]
        if (viewPos + view_wview[0] &gt; room_width) {
            viewPos = room_width - view_wview[0];        
        }
        view_xview[0] = viewPos;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCollisionBase">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Fuck you Baltimore</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (controls) {
    if (!isFiring) {
        image_xscale = -BOB_SCALE;
    }
    image_speed = -walkSpeed;
    physics_apply_force(x,y,-moveSpeed,-100);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (controls) {
    if (!isFiring) {
        image_xscale = BOB_SCALE;
    }
    image_speed = walkSpeed;
    physics_apply_force(x,y,moveSpeed,-100);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>1</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>1</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.100000001490116</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>5,4</point>
    <point>26,4</point>
    <point>26,32</point>
    <point>5,32</point>
  </PhysicsShapePoints>
</object>
